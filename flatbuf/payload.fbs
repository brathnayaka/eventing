namespace flatbuf.payload;

table VbsThreadMap {
  threadID:short;
  partitions:[short];
}

table Payload {

  // Handler config
  app_name:string;
  checkpoint_interval:int; // Controls how frequently checkpoint will be updated in metadata bucket
  depcfg:string;
  debugger_port:string;
  execution_timeout:int; // Execution timeout for handler code execution
  lcb_inst_capacity:int; // Nested iterator related fields
  skip_lcb_bootstrap:bool; // Control bootstrap of lcb handles.
                           // In some case we need to skip lcb connects i.e. while checking for
                           // compilation issues in supplied handler code.
  timer_context_size:long;
  function_instance_id:string;
  handler_headers: [string]; // List of statements that will prefixed to handler code post code constraint checks
  handler_footers: [string]; // List of statements that will appended to handler code post code constraint checks

  // Server settings
  curr_host:string;
  curr_eventing_port:string;
  curr_eventing_sslport:string;
  eventing_dir:string;
  kv_host_port:string;

  // DCP event related fields
  key:string; // dcp mutation key
  value:string; // dcp mutation value

  // Timer event related fields
  callback_fn:string; // timer event callback function
  context:string; // context for timer

  // CPP worker config
  partitionCount:short; // Virtual partitions for sharding workload among c++ workers
  thr_map: [VbsThreadMap]; // Mapping of vbuckets to std::thread associated with V8Worker instance;

}

root_type Payload;
