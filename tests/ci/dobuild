#!/bin/bash

source ~/.cienv

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$RELEASE" = "" ]; then
  echo 'RELEASE not set'
  exit 2
fi

if [ "$MANIFEST" = "" ]; then
  echo 'MANIFEST not set'
  exit 2
fi

if [ "$PEGGED" = "" ]; then
  export BLD_NUM=0
else
  export BLD_NUM=$PEGGED
fi

error_exit() {
  echo "</pre><h3>Server build failed: $1</h3><pre>"
  exit 2
}

> ~/repos.list
note_version() {
  repo=$1; pos=$2
  echo "$repo $pos" >> ~/repos.list
  cd $pos
  current="`git rev-parse HEAD`"
  test -f ~/$repo.good || (echo $current > ~/$repo.good)
  good="`cat ~/$repo.good`"
  echo -n "$repo is at <a href='https://github.com/couchbase/$repo/commit/$current'>${current:0:7}</a>, changes since last good build: "
  if [ "$current" != "$good" ]; then
    echo
    git log --pretty="format: <a href='https://github.com/couchbase/$repo/commit/%H'>%h</a> %s" $good..HEAD
    echo
  else
    echo "none"
  fi
}

echo "</pre><h3>Building</h3><pre>"
> $WORKSPACE/versions.cfg
> $WORKSPACE/make.log

if [ ! -d ~/.reference ]; then
  mkdir ~/.reference
  cd ~/.reference
  repo init -u https://github.com/couchbase/build-manifests -b master -m $MANIFEST -g all --mirror 1>>$WORKSPACE/make.log 2>&1
  test $? -eq 0 || error_exit "Repo Init"
fi

echo "Started building at `date +'%Y/%m/%d %H:%M:%S'`"
test "$BLD_NUM" = "0" || echo "Using pegged server, $BLD_NUM build"
echo "Calculating base"
rm -rf ~/.manifests
git clone https://github.com/couchbase/build-manifests ~/.manifests 1>>$WORKSPACE/make.log 2>&1
cd ~/.manifests

test "$BLD_NUM" = "0" && BLD_NUM="`git log --oneline | grep "couchbase-server" | grep -F "$RELEASE-" | head -1 | sed "s/^.*$RELEASE-\([0-9]*\).*$/\1/g"`"
SHA=`git log --oneline | grep "couchbase-server" | grep "$RELEASE-$BLD_NUM" | head -1 | awk '{print $1}'`
git branch thisrun $SHA 1>>$WORKSPACE/make.log 2>&1

echo "Updating mirror"
cd ~/.reference
repo sync --jobs=32 1>>$WORKSPACE/make.log 2>&1

echo "Basing run on $RELEASE-$BLD_NUM <a href=https://github.com/couchbase/build-manifests/blob/$SHA/$MANIFEST>$SHA</a>"
find $WORKSPACE -mindepth 1 -not -name '*.log' -exec rm -rf {} + 1>>$WORKSPACE/make.log 2>&1
mkdir -p $WORKSPACE 1>>$WORKSPACE/make.log 2>&1
cd $WORKSPACE
repo init -u ~/.manifests -b thisrun -m $MANIFEST -g all --reference=~/.reference 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Repo Init at $SHA"

echo "Updating tree for run $TS"
cd $WORKSPACE
repo sync --jobs=32 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Updating tree"
test $WORKSPACE/cbbuild && test $WORKSPACE/voltron || error_exit "Unable to find voltron"

cd $WORKSPACE
chmod a+w CMakeLists.txt
perl -pi -e 's/ADD_SUBDIRECTORY \(analytics\)/# No analytics/' CMakeLists.txt
perl -pi -e 's/ADD_SUBDIRECTORY \(cbas-ui\)/# No cbas-ui/' CMakeLists.txt

note_version gocb         $WORKSPACE/godeps/src/github.com/couchbase/gocb
note_version libcouchbase $WORKSPACE/libcouchbase
note_version query        $WORKSPACE/goproj/src/github.com/couchbase/query
note_version indexing     $WORKSPACE/goproj/src/github.com/couchbase/indexing
note_version kv_engine    $WORKSPACE/kv_engine
note_version ns_server    $WORKSPACE/ns_server
note_version couchstore   $WORKSPACE/couchstore
note_version couchdb      $WORKSPACE/couchdb

cd $WORKSPACE/goproj/src/github.com/couchbase/eventing
echo "Switching eventing to $BRANCH"
git checkout $BRANCH 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout $BRANCH"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version eventing $WORKSPACE/goproj/src/github.com/couchbase/eventing

cd $WORKSPACE/goproj/src/github.com/couchbase
if [ ! -d eventing-ee ]; then
	git clone git@github.com:couchbase/eventing-ee.git
fi
cd $WORKSPACE/goproj/src/github.com/couchbase/eventing-ee
echo "Switching eventing-ee to $BRANCH"
git checkout $BRANCH 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout $BRANCH"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version eventing-ee $WORKSPACE/goproj/src/github.com/couchbase/eventing-ee

cd $WORKSPACE/testrunner
echo "Switching testrunner to master"
git checkout master 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout master"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version testrunner $WORKSPACE/testrunner

if [ "$CIBOT" = "true" ]; then
  > ~/gerrit.list
  autolist="`curl -s -o- "http://review.couchbase.org/changes/?q=project:eventing+status:open+branch:$BRANCH+reviewer:1004336" | grep _number | sed 's/[ ,]*//g' | awk -F: '{print $2}' | sort -n`"
  for patch_id in $GERRIT $autolist
  do
    curl -s -o- "http://review.couchbase.org/changes/$patch_id/" | grep -qs '"status": "NEW"'
    if [ $? -ne 0 ]; then
      echo "Patchset <a href='http://review.couchbase.org/#/c/$patch_id'>$patch_id</a> is closed, skipping"
      continue
    fi
    cd $WORKSPACE/goproj/src/github.com/couchbase/eventing
    revspec=`git ls-remote -q http://review.couchbase.org/eventing refs/changes/*/$patch_id/* | awk '{print $2}' | sort -n -t/ -k5 | tail -1`
    echo "Pulling in <a href='http://review.couchbase.org/#/c/$patch_id'>uncommitted change $patch_id</a> at $revspec"
    git fetch -q http://review.couchbase.org/eventing $revspec && git cherry-pick FETCH_HEAD
    test $? -eq 0 && echo "$revspec" | awk -F/ '{print $4 "," $5}' >> ~/gerrit.list
  done
fi


cd $WORKSPACE
PRODUCT_VERSION=${RELEASE}-${BLD_NUM}-rel
rm -f *.rpm *.deb
rm -rf ~/rpmbuild
rm -rf $WORKSPACE/voltron/build/deb
rm -rf $WORKSPACE/install/*
find goproj godeps -name \*.a -print0 | xargs -0 rm -f

cd $WORKSPACE
mkdir -p build
cd build

echo "Building cmakefiles and deps"
cmake -D CMAKE_INSTALL_PREFIX=$WORKSPACE/install \
      -D CMAKE_PREFIX_PATH=$WORKSPACE/install \
      -D CMAKE_BUILD_TYPE=RelWithDebInfo \
      -D PRODUCT_VERSION=${PRODUCT_VERSION} \
      -D BUILD_ENTERPRISE=TRUE \
      -D CB_DOWNLOAD_DEPS=1 \
      -D SNAPPY_OPTION=Disable \
      .. 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "CMake build"

echo "Patching breakpad"
cd $WORKSPACE/build/tlm/deps/breakpad.exploded
for pf in ~/bin/breakpad.debian9.*.patch; do patch -p1 < $pf; done

echo "Building main product"
cd $WORKSPACE/build
make -j8 install 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Making Install"

cd $WORKSPACE
repo manifest -r > current.xml
repo manifest -r > manifest.xml

echo "Actual Versions:" >> $WORKSPACE/versions.cfg
cd $WORKSPACE
repo forall -c 'echo "$REPO_PROJECT `git log --oneline HEAD...HEAD^`"' 2>/dev/null 1>>$WORKSPACE/versions.cfg

chmod a+r /var/www/*

